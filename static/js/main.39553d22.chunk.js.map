{"version":3,"sources":["components/card.component.js","components/card-list.component.js","components/search.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","user","name","CardList","users","map","key","id","Search","type","placeholder","onChange","onSearchChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAEaA,EAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAME,KAAKC,UCH1CC,EAAW,SAAAJ,GAAK,OACzB,yBAAKC,UAAU,OACVD,EAAMK,MAAMC,KAAI,SAAAJ,GAAI,OACjB,kBAAC,EAAD,CAAMK,IAAKL,EAAKM,GAAIN,KAAMA,SCJzBO,EAAS,SAAAT,GAAK,OACvB,yBAAKC,UAAU,sDACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,kBAET,2BACIS,KAAK,SACLT,UAAU,eACVU,YAAY,eACZC,SAAUZ,EAAMa,qBCiCrBC,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFD,eAAiB,SAAAE,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXf,MAAO,GACPY,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAK,OAAI,EAAKW,SAAS,CAAEX,MAAOA,S,+BAOhC,IAAD,EACwBoB,KAAKL,MAA5Bf,EADD,EACCA,MAAOY,EADR,EACQA,YACTS,EAAgBrB,EAAMsB,QAAO,SAAAzB,GAAI,OACrCA,EAAKC,KAAKyB,cAAcC,SAASZ,EAAYW,kBAG/C,OACE,yBAAK3B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQY,eAAgBY,KAAKZ,iBAC7B,kBAAC,EAAD,CAAUR,MAAOqB,U,GA9BTI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.39553d22.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Card = props => (\r\n    <div className=\"col-md-4 mb-5\">\r\n        <div className=\"card h-100\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title\">{props.user.name}</h2>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Card } from './card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"row\">\r\n        {props.users.map(user => (\r\n            <Card key={user.id} user={user} />\r\n        ))}\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Search = props => (\r\n    <div className=\"card text-white bg-secondary my-5 py-4 text-center\">\r\n        <div className=\"card-body\">\r\n            <p className=\"text-white m-0\">\r\n\r\n                <input \r\n                    type=\"search\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Search Users\" \r\n                    onChange={props.onSearchChange}\r\n                />\r\n            </p>\r\n        </div>\r\n\r\n    </div>\r\n);\r\n","import React, { Component } from 'react'\nimport { CardList } from './components/card-list.component';\nimport { Search } from './components/search.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      users: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ users: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { users, searchField } = this.state;\n    const filteredUsers = users.filter(user =>\n      user.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Search onSearchChange={this.onSearchChange} />\n          <CardList users={filteredUsers} />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}